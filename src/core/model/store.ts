import { AnyAction, configureStore, Middleware } from "@reduxjs/toolkit";import cameraReducer from './slices/cameraSlice';import groundControlPointsReducer, {  clearAllLinkedImagesMiddleware,  populateNewGCPWithDefaultsMiddleware} from './slices/groundControlPointsSlice';import tiePointsReducer, { populateNewTPWithDefaultsMiddleware } from "./slices/tiePointsSlice";import resultSliceReducer from './slices/resultSlice';import imageListReducer from './slices/imageListSlice';import messageQueueReducer from './slices/messages/messageQueueSlice';import { addCameraPositionDataForImagesMiddleware, pointPositionOnImageBoundedMiddleware } from "./Middlewares";export const store = configureStore({  reducer: {    camera: cameraReducer,    groundControlPoints: groundControlPointsReducer,    tiePoints: tiePointsReducer,    result: resultSliceReducer,    imageList: imageListReducer,    messageQueue: messageQueueReducer,  },  middleware: (getDefaultMiddleware) =>    getDefaultMiddleware()    .prepend(addCameraPositionDataForImagesMiddleware)    .prepend(pointPositionOnImageBoundedMiddleware)    .prepend(populateNewTPWithDefaultsMiddleware)    .prepend(populateNewGCPWithDefaultsMiddleware)    .prepend(clearAllLinkedImagesMiddleware)});export type RootState = ReturnType<typeof store.getState>;export type AppDispatch = typeof store.dispatch;